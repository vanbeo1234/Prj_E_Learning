-- TẠO CƠ SỞ DỮ LIỆU
CREATE DATABASE E_LEARNING;
USE E_LEARNING;

-- BẢNG ROLE (DANH SÁCH CÁC VAI TRÒ)
CREATE TABLE ROLE (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    ROLE_NAME NVARCHAR(50) NOT NULL
);

CREATE TABLE STATUS_MANAGEMENT (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    STATUS_CODE NVARCHAR(20) NOT NULL, 
    TYPE NVARCHAR(20) NOT NULL, -- LOẠI TRẠNG THÁI (USER, COURSE, REQUEST)
    DESCRIPTION NVARCHAR(255) NULL -- MÔ TẢ TRẠNG THÁI
);

CREATE TABLE USER (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    USER_CODE NVARCHAR(50) UNIQUE NOT NULL, 
    ENCRYPTION_KEY NVARCHAR(255) NULL,
    NAME NVARCHAR(255) NOT NULL,
    EMAIL NVARCHAR(255) UNIQUE NOT NULL,
    PASSWORD NVARCHAR(255) NOT NULL,
    PHONE NVARCHAR(20),
    ADDRESS NVARCHAR(255),
    GENDER INT(1) NOT NULL DEFAULT 0, 
    DATE_OF_BIRTH DATETIME NULL,
    ROLE_ID INT NOT NULL,
    STATUS_CODE NVARCHAR(20) NOT NULL,
    EXPERIENCE INT NULL,
    CERTIFICATION NVARCHAR(255) NULL,
    CREATED_BY NVARCHAR(50) NULL,
    UPDATED_BY NVARCHAR(50) NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (ROLE_ID) REFERENCES ROLE(ID) ON DELETE CASCADE
);

CREATE TABLE SYSTEM_FUNCTION (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    FUNCTION_NAME NVARCHAR(255) NOT NULL,
    DESCRIPTION NVARCHAR(255) NULL
);
 
CREATE TABLE ROLE_FUNCTION (
    ROLE_ID INT,
    FUNCTION_ID INT,
    PRIMARY KEY (ROLE_ID, FUNCTION_ID),
    FOREIGN KEY (ROLE_ID) REFERENCES ROLE(ID) ON DELETE CASCADE,
    FOREIGN KEY (FUNCTION_ID) REFERENCES SYSTEM_FUNCTION(ID) ON DELETE CASCADE
);

-- BẢNG COURSE (LƯU THÔNG TIN KHÓA HỌC)
CREATE TABLE COURSE (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    COURSE_CODE NVARCHAR(20) NOT NULL,
    COURSE_NAME NVARCHAR(255) NOT NULL,
    DESCRIPTION NVARCHAR(255),
    LEARNING_OUTCOME TEXT NULL,
    BACKGROUND_IMG TEXT NULL,
    START_DATE DATETIME,
    END_DATE DATETIME,
    LESSON_COUNT INT NOT NULL DEFAULT 0,
    STATUS_CODE NVARCHAR(20) NOT NULL,
    CREATED_BY NVARCHAR(50) NULL,
    UPDATED_BY NVARCHAR(50) NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- SỬA BẢNG COURSE_DETAIL ĐỂ LƯU DANH SÁCH VIDEO DƯỚI DẠNG JSON
CREATE TABLE LESSON_DETAIL (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    LESSON_CODE NVARCHAR(20) NOT NULL,
    COURSE_ID INT NOT NULL,
    LESSON_ORDER INT NOT NULL,
    LESSON_NAME NVARCHAR(255) NOT NULL,
    VIDEO_LINK TEXT NULL,
    RESOURCE_LINK TEXT NULL,
    FOREIGN KEY (COURSE_ID) REFERENCES COURSE(ID) ON DELETE CASCADE
);

-- BẢNG CHAT_MESSAGE
CREATE TABLE LESSON_COMMENT (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    COURSE_CODE INT NOT NULL,
    LESSON_ID INT NOT NULL,
    SEND_USER_ID NVARCHAR(50) NOT NULL,
    MESSAGE NVARCHAR(300) NOT NULL,
    COMMENT_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (LESSON_ID) REFERENCES LESSON_DETAIL(ID) ON DELETE CASCADE,
    FOREIGN KEY (SEND_USER_ID) REFERENCES USER(USER_CODE) ON DELETE CASCADE
);

CREATE TABLE INSTRUCTOR_ENROLLMENT (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    INSTRUCTOR_ID INT NOT NULL,
    COURSE_ID INT NOT NULL,
    FOREIGN KEY (INSTRUCTOR_ID) REFERENCES USER(ID) ON DELETE CASCADE,
    FOREIGN KEY (COURSE_ID) REFERENCES COURSE(ID) ON DELETE CASCADE
);

CREATE TABLE STUDENT_ENROLLMENT (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    STUDENT_ID INT NOT NULL,
    COURSE_ID INT NOT NULL,
    ENROLLMENT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PROGRESS_PERCENTAGE INT NOT NULL DEFAULT 0,
    NOTE NVARCHAR(255) NULL,
    FOREIGN KEY (STUDENT_ID) REFERENCES USER(ID) ON DELETE CASCADE,
    FOREIGN KEY (COURSE_ID) REFERENCES COURSE(ID) ON DELETE CASCADE
);

CREATE TABLE NOTIFICATION (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    COURSE_ID INT NOT NULL, 
    MESSAGE NVARCHAR(255) NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (COURSE_ID) REFERENCES COURSE(ID) ON DELETE CASCADE 
);

-- THÊM DỮ LIỆU VÀO BẢNG ROLE
INSERT INTO ROLE (ROLE_NAME) VALUES ('ADMIN'), ('INSTRUCTOR'), ('STUDENT');

-- TRIGGER TẠO MÃ NGƯỜI DÙNG
DELIMITER $$

CREATE TRIGGER TRG_BEFORE_INSERT_USER
BEFORE INSERT ON USER
FOR EACH ROW
BEGIN
    DECLARE MAX_CODE VARCHAR(10);
    DECLARE NEXT_NUMBER INT;

    SELECT RIGHT(USER_CODE, 4) INTO MAX_CODE FROM USER ORDER BY USER_CODE DESC LIMIT 1;

    IF MAX_CODE IS NULL THEN
        SET NEXT_NUMBER = 1;
    ELSE
        SET NEXT_NUMBER = MAX_CODE + 1;
    END IF;

    SET NEW.USER_CODE = CONCAT('US', LPAD(NEXT_NUMBER, 4, '0'));
END$$

DELIMITER ;
-- --------------------------------------
-- CHÈN DỮ LIỆU
-- Thêm dữ liệu vào bảng Role
INSERT INTO Role (Role_Name) VALUES ('Admin'), ('Instructor'), ('Student');

-- Thêm dữ liệu vào bảng Status_Management
INSERT INTO Status_Management (Status_Code, Type, Description) VALUES
('ACTIVE', 'User', 'Người dùng đang hoạt động'),
('INACTIVE', 'User', 'Người dùng bị khóa'),
('ACTIVE', 'Course', 'Khóa học đang mở'),
('INACTIVE', 'Course', 'Khóa học bị đóng');

INSERT INTO User (Name, Email, Password, Phone, Address, Gender, Date_Of_Birth, Role_ID, Status_Code, Experience, Certification, Created_By) 
VALUES 
('Nguyễn Văn A', 'a@example.com', '123456', '0123456789', 'Hà Nội', 1, '1990-01-01', 1, 'ACTIVE', 5, 'Java Cert', 'Admin'),
('Trần Thị B', 'b@example.com', '123456', '0987654321', 'TP HCM', 0, '1995-05-15', 2, 'ACTIVE', 3, 'Python Cert', 'Admin'),
('Lê Văn C', 'c@example.com', '123456', '0365478921', 'Đà Nẵng', 1, '2000-07-20', 3, 'INACTIVE', NULL, NULL, 'Admin');

-- ------------------------------------------------------------
-- ĐỔI DỮ LIỆU
-- Vì dữ kiểu dữ liệu giữa cột Send_User_ID trong bảng lesson_comment và cột user_code trong bảng user không tương thích => chạy câu lệnh này để thực hiện API tìm kiếm
-- 1. Xóa ràng buộc khóa ngoại (thay 'lesson_comment_ibfk_2' bằng đúng tên khóa ngoại của bạn)
ALTER TABLE lesson_comment DROP FOREIGN KEY lesson_comment_ibfk_2;

-- 2. Chỉnh sửa kiểu dữ liệu cột user_code trong bảng user
ALTER TABLE user MODIFY COLUMN user_code VARCHAR(255) NOT NULL;

-- 3. Đảm bảo cột Send_User_ID có cùng kiểu dữ liệu với user_code
ALTER TABLE lesson_comment MODIFY COLUMN Send_User_ID VARCHAR(255);

-- 4. Tạo lại khóa ngoại
ALTER TABLE lesson_comment ADD CONSTRAINT lesson_comment_ibfk_2 
FOREIGN KEY (Send_User_ID) REFERENCES user(user_code) ON DELETE CASCADE ON UPDATE CASCADE;

-- 5. Kiểm tra
SELECT column_name, character_set_name, collation_name
FROM information_schema.columns
WHERE table_name IN ('lesson_comment', 'user') AND column_name IN ('Send_User_ID', 'user_code');
-- -------------------------------------------------------------

SELECT * FROM user;
